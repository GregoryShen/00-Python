课程主要内容

1. 正则表达式基本概念
2. Python正则表达式re模块
3. 正则表达式语法
4. re模块相关方法使用

为什么要使用正则

疑问： 字符串匹配就可以实现？
场景1：找到imooc开头的语句

cat imooc.txt

imooc Java
imooc Html
imooc Python imooc

C
C#
Go
VB

vi find_imooc.py

def find_start_imooc(fname)
    f = open(fname)
    for line in f:
        if line.startswith('imooc'):
            print(line)

find_start_imooc('imooc.txt')

场景2： 找到imooc开头和结尾的语句

def find_in_imooc(fname)
    f = open(fname)
    for line in f:
        if line.startswith('imooc')\
           and line.endswith('imooc\n'):
            print(line)

find_in_imooc('imooc.txt')

可以进阶，不要\n-->添加切片操作

def find_in_imooc(fname)
    f = open(fname)
    for line in f:
        if line.startswith('imooc')\
           and line[:-1].endswith('imooc'):
            print(line)

find_in_imooc('imooc.txt')

场景3：匹配一个下划线和字母开头的变量名

>>> a = '_value1'
>>> a and (a[0]=='_' or 'a' <= a[0] <= 'z')
True
>>> a = '1_value1'
>>> a and (a[0]=='_' or 'a' <= a[0] <= 'z')
False

我们的疑问：每次匹配都要单独完成，我们能否把他做成
一个规则？

正则表达式概念

1. 使用单个字符串来描述匹配一系列符合某个句法规则的
字符串

2. 是对字符串操作的一种逻辑公式

3. 应用场景：处理文本和数据

4. 正则表达式过程： 依次拿出表达式和文本中的字符比较，
如果每一个字符都能匹配，则匹配成功，否则匹配失败
-------------------------------------------------
2-1 re模块使用(一)

python第一个正则表达式

1. import re: python正则表达式模块
2. 第一个正则表达式
    re.compile(r'imooc')
    pattern.match('imooc python')

r'imooc' --> Pattern --> Match --> result

先用re的compile方法生成Pattern对象，这个对象不能自己实例化，
只能通过compile方法生成；在调用pattern对象的方法match去匹配
字符串，除了match方法，还有search，find等操作，匹配的结果
会返回一个Match的实例，这就是我们要的结果，这个match有一些方法，
这个时候就可以拿到想要的匹配结果


例：

>>> str1 = 'imooc python'
>>> str1.find('11')    # 返回值为-1说明没有找到
-1
>>> str1.find('imooc')  # 找得到就返回索引值
0
>>> str1.startswith('imooc')
True
>>> import re
>>> pa = re.compile(r'imooc') # r代表原字符串
>>> type(pa)
_sre.SRE_Pattern

>>> dir(pa)
有很多方法

>>>help(pa.match)
返回的是一个对象或空

match匹配到的对象是从字符串的起始位置开始

>>> pa.match(str1)  #没有匹配成功返回空
>>> ma = pa.match(str1)
<_sre.SRE_Match at 0xxxxxxxx>

>>> ma.group()  # pa的值放在group里
'imooc'
>>> help(ma.group)
返回的是字符串或元组

>>> ma.span()   # 想知道匹配结果在原字符串中的索引位置
(0, 5)
>>> ma.string   # 被匹配的字符串放在string中
'imooc python'
>>> ma.re       # Pattern的实例是放在re中
re.compile(r'imooc')

# 匹配以下划线开头
>>> pa1 = re.compile(r'_')
>>> ma1 = pa1.match('_value')
>>> ma1.group()
'_'

-------------------------------------------------
2-2 re模块使用(二)

# 如果有大写的i也想匹配，怎么办
>>> pa = re.compile(r'imooc', re.I)   # I是忽略大小写
>>> pa
re.compile(r'imooc', re.IGNORECASE)

>>> ma = pa.match('imooc python')
返回空
>>> ma.group()
'imooc'

>>> ma = pa.match('Imooc python')
>>>ma.group()
'Imooc'

>>> ma = pa.match('ImoOc python')
>>>ma.group()
'ImoOc'


>>>ma.groups()
()  # 返回的是空的元组

>>> pa = re.compile(r'(imooc)', re.I)
>>> ma = pa.match(str1)

>>> str1
>>> ma.group()
'imooc'
>>> ma.groups()
('imooc',)

>>> help(re.match)
>>> ma = re.match(r'imooc', str1)
>>> ma.group()
'imooc'
>>> ma.groups()
()

注意的两点：
compile后面要是原字符串，如果不使用原字符串要注意转义
如果需要做多次匹配，而正则表达式只有一个，就是都是使用
一个来做匹配，可以提前生成一个pattern对象，使用Pattern
对象去做match，如果使用rem模块的match方法，每次都会生成
一个Pattern对象，

-------------------------------------------------
5.3 正则表达式语法（一）

.  匹配任意字符(除了\n)
[...] 匹配字符集
\d/\D  匹配数字/非数字
\s/\S  匹配空白/非空白字符
\w/\W  匹配单词字符[a-zA-Z0-9]/非单词字符

例：
>>> ma = re.match(r'a', 'a')
>>> ma.group()
>>> ma = re.match(r'a', 'b')
>>> type(ma)
NoneType
>>> ma = re.match(r'.', 'b')
>>> ma
<_sre.SRE_Match at 0xrgtsrgsarfg>
>>> ma.group()
'b'
>>> ma = re.match(r'.', '0')

>>> ma.group()
'0'
>>> ma = re.match(r'{.}', '{a}')
>>> ma.group()
'{a}'
>>> ma = re.match(r'{.}', '{0}')
>>> ma.group()
'{0}'

>>> ma = re.match(r'{..}', '{01}')
>>> ma.group()
'{01}'

要匹配{[a-z]}

>>> ma = re.match(r'{[abc]}', '{a}')
>>> ma.group()
'{a}'
>>> ma = re.match(r'{[abc]}', '{d}')
没结果
>>> ma = re.match(r'{[a-z]}', '{d}')

>>> ma.group()
'{d}'

>>> ma = re.match(r'{[a-zA-Z]}', '{A}')

>>> ma.group()
'{A}'

>>> ma = re.match(r'{[a-zA-Z0-9]}', '{0}')

>>> ma.group()
'{0}'

>>> ma = re.match(r'{[\w]}', '{0}')

>>> ma.group()
'{0}'

>>> ma = re.match(r'{[\w]}', '{ }')

>>> ma 为空

>>> ma = re.match(r'{[\W]}', '{ }')

>>> ma.group()
'{ }'

>>> ma = re.match(r'[[\w]]', '[a]')

>>> ma
无结果

>>> ma = re.match(r'\[[\w]\]', '[a]')

>>> ma.group()
'[a]'

>>> ma = re.match(r'\[[\w]\]', '[0]')

>>> ma.group()
'[0]'

-------------------------------------------------
3-2 正则表达式语法（二）

*    匹配前一个字符0次或无限次
+    匹配前一个字符1次或无限次
?    匹配前一个字符0次或1次
{m}/{m,n} 匹配前一个字符m次或1次
*? /+? /??  匹配模式变为非贪婪（尽可能少匹配字符）

[A-Z][a-z]*

>>> ma = re.match(r'[A-Z][a-z]', 'Aa')
>>> ma.group()
'Aa'

>>> ma = re.match(r'[A-Z][a-z]', 'A')
>>> ma
无结果
>>> ma = re.match(r'[A-Z][a-z]*', 'A')
>>> ma
<_sre.SRE_Match at 0xdfafdafga>
>>> ma.group()
'A'

>>> ma = re.match(r'[A-Z][a-z]*', 'asdfasfeA')
>>> ma.group()
'asdfasfeA'

>>> ma = re.match(r'[A-Z][a-z]*', '1asdfasfeA')
>>> ma
无结果

>>> ma = re.match(r'[A-Z][a-z]*', 'Aa1')
>>> ma
<_sre.SRE_Match at 0xasdfasf>
>>> ma.group()
'Aa'

例：匹配Python有效的变量名
(有效变量名的命名规则：以下划线或字母开头的)
[_a-zA-Z]+[_a\w]*

>>> ma =re.match(r'[_a-zA-Z]+[_\w*', '10')
>>> ma
无结果
>>> ma =re.match(r'[_a-zA-Z]+[_\w*', '_ht11')
>>> ma.group()
'_ht11'

>>> ma =re.match(r'[_a-zA-Z]+[_\w*', 'Athis')
>>> ma.group()
'Athis'

>>> ma =re.match(r'[_a-zA-Z]+[_\w*', '[this')
>>> ma
无结果

0-99

[1-9]?[0-9]

>>> ma = re.match(r'[1-9]?[0-9]', '99')
>>> ma.group()
'99'

>>> ma = re.match(r'[1-9]?[0-9]', '9')
>>> ma.group()
'9'

>>> ma = re.match(r'[1-9]?[0-9]', '09')
>>> ma.group()
'0 '

~~~~~~下面是{m}/{m,n}的例子~~~~
>>> ma = re.match(r'[a-zA-Z0-9]{6}', 'abc123')
>>> ma.group()
'abc123'
>>> ma = re.match(r'[a-zA-Z0-9]{6}', 'abc12')
>>> ma
结果为空
>>> ma = re.match(r'[a-zA-Z0-9]{6}', 'abc1234')
>>> ma
<_sre.SRE_Match at 0xsdfgwsergsg>
>>> ma.group()
'abc123'

>>> ma = re.match(r'[a-zA-Z0-9]{6}', 'abc12__')
>>> ma
结果为空

>>> ma = re.match(r'[a-zA-Z0-9]{6}@163.com', 'abc123@163.com')
>>> ma.group()
'abc123@163.com'

>>> ma = re.match(r'[a-zA-Z0-9]{6,10}@163.com', 'abc123@163.com')
>>> ma.group()
'abc123@163.com'

>>> ma = re.match(r'[a-zA-Z0-9]{6,10}@163.com', 'imoocedu12345@163.com')
>>> ma
结果为空

>>> ma = re.match(r'[a-zA-Z0-9]{6,10}@163.com', 'imoocedu@163.com')
>>> ma.group()
'imoocedu@163.com'

~~~~~~下面是*?/+?/??的例子~~~~
>>> ma = re.match(r'[0-9][a-z]*', '1bc')   # 贪婪模式
>>> ma.group()
'1bc'

>>> ma = re.match(r'[0-9][a-z]*?', '1bc')   # 非贪婪模式
>>> ma.group()
'1'

>>> ma = re.match(r'[0-9][a-z]+?', '1bc')   # 非贪婪模式
>>> ma.group()
'1b'

>>> ma = re.match(r'[0-9][a-z]??', '1bc')   # 非贪婪模式
>>> ma.group()
'1'

-------------------------------------------------
3-3 正则表达式语法（三）

边界匹配

^      匹配字符串开头
$      匹配字符串结尾
\A/\Z  指定的字符串必须出现在开头/结尾

>>> ma = re.match(r'[\w]{4,10}@163.com', 'imooc@163.com')
>>> ma.group()
'imooc@163.com'

>>> ma = re.match(r'[\w]{4,10}@163.com', 'imooc@163.comabc')
>>> ma.group()
'imooc@163.com'

>>> ma = re.match(r'[\w]{4,10}@163.com$', 'imooc@163.comabc')
>>> ma
结果为空

>>> ma = re.match(r'^[\w]{4,10}@163.com$', 'imooc@163.comabc')
>>> ma
结果为空

>>> ma = re.match(r'^[\w]{4,10}@163.com$', 'imooc@163.com')
>>> ma.group()
'imooc@163.com'

>>> ma = re.match(r'^\Aimooc[\w]*', 'imoocpython')
>>> ma.group()
'imoocpython'

>>> ma = re.match(r'^\Aimooc[\w]*', 'iimoocpython')
>>> ma
没有结果

分组匹配

|       匹配左右任意一个表达式
(ab)    括号中表达式作为一个分组
\<number>  引用编号为num的分组匹配到的字符串
(?P<name>) 分组起一个别名
(?P=name)  引用别名为name的分组匹配字符串

~~~~~下面是|的例子~~~~~~~



-------------------------------------------------
廖雪峰 正则表达式

字符串是编程时涉及到的最多的一种数据结构，对字符串进行
操作的需求几乎无处不在。比如判断一个字符串是否是
合法的email地址，虽然可以编程提取@前后的子串，再分别判断
是否是单词和域名，但这样做不但麻烦，而且代码难以复用

正则表达式是一种用来匹配字符串的强有力的武器。它的设计
思想是用一种描述性的语言来给字符串定义一个规则，凡是
符合规则的字符串，我们就认为它“匹配”了，否则，该字符串
就是不合法的。

所以，我们判断一个字符串是否是合法的Email方法是：

1. 创建一个匹配Email的正则表达式
2. 用该正则表达式去匹配用户的输入来判断是否合法

因为正则表达式也是用字符串表式的，所以，我们要首先
了解如何用字符来描述字符

在正则表达式中，如果直接给出字符，就是精确匹配。
用\d可以匹配一个数字，\w可以匹配一个字母或数字，所以：

.可以匹配任意字符

要匹配变长的字符，在正则表达式中，用*表示任意个字符（包括0个），
用+表示至少一个字符，用？表示0或1个字符

直接给出字符：精确匹配
\d：匹配一个数字
\w：匹配一个字母或数字
\s：匹配一个空格（包括tab等空白符）
.： 匹配任意字符
*： 表示任意个字符（包括0个）
+： 至少一个字符
?： 0个或1个字符
{n}: n个字符
{n, m}：n-m个字符
[0-9a-zA-Z\_]：匹配一个数字、字母或下划线
[0-9a-zA-Z\_]+：匹配至少由一个数字、字母或者下划线组成的字符串
[a-zA-Z\_][0-9a-zA-Z\_]*：匹配由字母或下划线开头，后接任意个
由一个数字、字母或下划线组成的字符串，也就是python的合法变量
[a-zA-Z\_][0-9a-zA-Z\_]{0,19}：更精确的限制了变量长度是1-20个
字符（前面1个字符+后面最多19个字符）
A|B：可以匹配A或B：例子(p|P)ython可以匹配'Python'或'python'
^：行的开头
^\d：必须以数字开头
$：行的结束
\d$：必须以数字结束

注意：py可以匹配'python'，但是加上^py$就变成了整行匹配，就只能匹配'py'了



\d{3}\s+\d{3,8}

可以匹配以任意个空格隔开的带区号的电话号码

如果要匹配'010-12345'， '-'要转义，所以是
\d{3}\-\d{3,8}

python的字符串本身也用\转义


match()方法判断是否匹配，如果匹配成功，返回一个match对象，
否则返回None。常见的判断方法就是：


















































